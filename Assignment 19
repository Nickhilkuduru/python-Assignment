1. Make a class called Thing with no contents and print it. Then, create an object called example
from this class and also print it. Are the printed values the same or different?

Ans.class Thing:
    pass

print(Thing)

example = Thing()
print(example)

The printed values are different. The first value will print the class name, whereas the second value will print the object name.

2. Create a new class called Thing2 and add the value &#39;abc&#39; to the letters class attribute. Letters
should be printed.

Ans.class Thing2:
    def __init__(self):
        self.letters = 'abc'

    def printLetters(self):
        print(self.letters)

thing2 = Thing2()
thing2.printLetters() # prints 'abc'

3. Make yet another class called, of course, Thing3. This time, assign the value &#39;xyz&#39; to an instance
(object) attribute called letters. Print letters. Do you need to make an object from the class to do
this?

Ans.No, you do not need to make an object from the class to do this.

class Thing3:
    letters = 'xyz'
    print(letters)
    
4. Create an Element class with the instance attributes name, symbol, and number. Create a class
object with the values &#39;Hydrogen,&#39; &#39;H,&#39; and 1.

Ans.class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number

hydrogen = Element('Hydrogen', 'H', 1)

5. Make a dictionary with these keys and values: &#39;name&#39;: &#39;Hydrogen&#39;, &#39;symbol&#39;: &#39;H&#39;, &#39;number&#39;: 1. Then,
create an object called hydrogen from class Element using this dictionary.

dictionary = {'name': 'Hydrogen', 'symbol': 'H', 'number': 1}

class Element:
    def __init__(self, dictionary):
        self.name = dictionary['name']
        self.symbol = dictionary['symbol']
        self.number = dictionary['number']

hydrogen = Element(dictionary)

6. For the Element class, define a method called dump() that prints the values of the objectâ€™s
attributes (name, symbol, and number). Create the hydrogen object from this new definition and
use dump() to print its attributes.

class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number
   
    def dump(self):
        print(f'name: {self.name}, symbol: {self.symbol}, number: {self.number}')

hydrogen = Element('Hydrogen', 'H', 1)
hydrogen.dump()

# Output: name: Hydrogen, symbol: H, number: 1

7. Call print(hydrogen). In the definition of Element, change the name of method dump to __str__,
create a new hydrogen object, and call print(hydrogen) again.

print(hydrogen):
Hydrogen

print(hydrogen):
Element: Hydrogen

8. Modify Element to make the attributes name, symbol, and number private. Define a getter
property for each to return its value.

class Element {
  constructor(name, symbol, number) {
    this._name = name;
    this._symbol = symbol;
    this._number = number;
  }
  get name() {
    return this._name;
  }
  get symbol() {
    return this._symbol;
  }
  get number() {
    return this._number;
  }

9. Define three classes: Bear, Rabbit, and Octothorpe. For each, define only one method: eats(). This
should return &#39;berries&#39; (Bear), &#39;clover&#39; (Rabbit), or &#39;campers&#39; (Octothorpe). Create one object from
each and print what it eats.

class Bear:
    def eats():
        return 'berries'

class Rabbit:
    def eats():
        return 'clover'

class Octothorpe:
    def eats():
        return 'campers'

bear = Bear()
rabbit = Rabbit()
octothorpe = Octothorpe()

print(bear.eats())
print(rabbit.eats())
print(octothorpe.eats())

10. Define these classes: Laser, Claw, and SmartPhone. Each has only one method: does(). This
returns &#39;disintegrate&#39; (Laser), &#39;crush&#39; (Claw), or &#39;ring&#39; (SmartPhone). Then, define the class Robot that
has one instance (object) of each of these. Define a does() method for the Robot that prints what its
component objects do.

class Laser {
  does() {
    return 'disintegrate';
  }
}

class Claw {
  does() {
    return 'crush';
  }
}

class SmartPhone {
  does() {
    return 'ring';
  }
}

class Robot {
  constructor(laser, claw, smartPhone) {
    this.laser = laser;
    this.claw = claw;
    this.smartPhone = smartPhone;
  }

  does() {
    console.log(`The laser ${this.laser.does()}s, the claw ${this.claw.does()}s, and the smartphone ${this.smartPhone.does()}s.`);
  }
}

const robot = new Robot(new Laser(), new Claw(), new SmartPhone());
robot.does();
1. What is the name of the feature responsible for generating Regex objects?

Ans.The name of the feature responsible for generating Regex objects is the "Pattern" feature.

2. Why do raw strings often appear in Regex objects?

Ans.Raw strings often appear in Regex objects because they are more efficient than other strings when it comes to pattern matching. Raw strings also have the advantage of being more readable and easier to debug.

3. What is the return value of the search() method?

Ans.The search() method returns the index of the first match of a given regular expression in a string. If there is no match, it returns -1.

4. From a Match item, how do you get the actual strings that match the pattern?

Ans.The match item can be used with the "group" method to get the actual strings that match the pattern.

5. In the regex which created from the r&#39;(\d\d\d)-(\d\d\d-\d\d\d\d)&#39;, what does group zero cover?
Group 2? Group 1?

Ans.Group 0 covers the entire expression. Group 1 covers the first set of digits, and group 2 covers the second set of digits.

6. In standard expression syntax, parentheses and intervals have distinct meanings. How can you tell
a regex that you want it to fit real parentheses and periods?

Ans.In regular expression syntax, parentheses and intervals have distinct meanings. To tell a regex that you want it to match real parentheses and periods, you need to escape them with a backslash. For example, the regex \ ( \ . \ ) will match a parenthesis and a period.

7. The findall() method returns a string list or a list of string tuples. What causes it to return one of
the two options?

Ans.The findall() method returns a list of string tuples if the pattern includes capturing groups.

8. In standard expressions, what does the | character mean?

Ans.The | character acts as a logical OR operator. It returns true if either of the expressions on either side of the | character return 
true.

9. In regular expressions, what does the character stand for?

Ans.The character stands for a newline.

10.In regular expressions, what is the difference between the + and * characters?

Ans.The + character matches one or more of the preceding character, while the * character matches zero or more of the preceding character.

11. What is the difference between {4} and {4,5} in regular expression?

Ans.{4} matches 4 occurrences of the preceding character, whereas {4,5} matches 4 to 5 occurrences of the preceding character.

12. What do you mean by the \d, \w, and \s shorthand character classes signify in regular
expressions?

Ans.\d matches any digit, \w matches any word character, and \s matches any whitespace character.

13. What do means by \D, \W, and \S shorthand character classes signify in regular expressions?

Ans.\D: non-digit characters
    \W: non-word characters
    \S: non-space characters
    
14. What is the difference between .*? and .*?

Ans.There is no difference between .*? and .*?. They both match any character, including newlines, zero or more times.

15. What is the syntax for matching both numbers and lowercase letters with a character class?

Ans.The syntax for matching both numbers and lowercase letters with a character class is [0-9a-z].

16. What is the procedure for making a normal expression in regax case insensitive?

Ans.The procedure for making a normal expression in regax case insensitive is to use the (?i) flag.

17. What does the . character normally match? What does it match if re.DOTALL is passed as 2nd
argument in re.compile()?

Ans.The . character normally matches any character except newline. If re.DOTALL is passed as 2nd argument in re.compile(), then . character matches any character including newline.

18. If numReg = re.compile(r&#39;\d+&#39;), what will numRegex.sub(&#39;X&#39;, &#39;11 drummers, 10 pipers, five rings, 4
hen&#39;) return?

Ans.11 drummers, 10 pipers, five rings, 4 hen

19. What does passing re.VERBOSE as the 2nd argument to re.compile() allow to do?

Ans.Passing re.VERBOSE as the 2nd argument to re.compile() allows for whitespace and comments within the regular expression string.

20. How would you write a regex that match a number with comma for every three digits? It must
match the given following:
&#39;42&#39;
&#39;1,234&#39;
&#39;6,368,745&#39;

but not the following:
&#39;12,34,567&#39; (which has only two digits between the commas)
&#39;1234&#39; (which lacks commas)

Ans.I would write the regex as follows: /^\d{1,3}(,\d{3})*$/

21. How would you write a regex that matches the full name of someone whose last name is
Watanabe? You can assume that the first name that comes before it will always be one word that
begins with a capital letter. The regex must match the following:
&#39;Haruto Watanabe&#39;
&#39;Alice Watanabe&#39;
&#39;RoboCop Watanabe&#39;
but not the following:
&#39;haruto Watanabe&#39; (where the first name is not capitalized)
&#39;Mr. Watanabe&#39; (where the preceding word has a nonletter character)
&#39;Watanabe&#39; (which has no first name)
&#39;Haruto watanabe&#39; (where Watanabe is not capitalized)

Ans.[A-Z][a-z]* Watanabe

22. How would you write a regex that matches a sentence where the first word is either Alice, Bob,
or Carol; the second word is either eats, pets, or throws; the third word is apples, cats, or baseballs;
and the sentence ends with a period? This regex should be case-insensitive. It must match the
following:
&#39;Alice eats apples.&#39;
&#39;Bob pets cats.&#39;
&#39;Carol throws baseballs.&#39;
&#39;Alice throws Apples.&#39;
&#39;BOB EATS CATS.&#39;
but not the following:
&#39;RoboCop eats apples.&#39;
&#39;ALICE THROWS FOOTBALLS.&#39;
&#39;Carol eats 7 cats.&#39;

Ans.^(Alice|Bob|Carol)\s(eats|pets|throws)\s(apples|cats|baseballs)\.$